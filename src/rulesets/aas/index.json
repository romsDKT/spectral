{
  "rules": {
    "asyncapi-contact-properties": {
      "description": "Contact object should have `name`, `url` and `email`.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "severity": 2,
      "type": "style",
      "given": "$.info.contact",
      "then": [
        {
          "field": "name",
          "function": "truthy"
        },
        {
          "field": "url",
          "function": "truthy"
        },
        {
          "field": "email",
          "function": "truthy"
        }
      ]
    },
    "asyncapi-example-value-or-externalValue": {
      "description": "Example should have either a `value` or `externalValue` field.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$..example",
      "then": {
        "function": "xor",
        "functionOptions": {
          "properties": [
            "externalValue",
            "value"
          ]
        }
      }
    },
    "asyncapi-info-contact": {
      "description": "Info object should contain `contact` object.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$",
      "then": {
        "field": "info.contact",
        "function": "truthy"
      }
    },
    "asyncapi-info-description": {
      "description": "AsyncAPI object info `description` must be present and non-empty string.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$",
      "then": {
        "field": "info.description",
        "function": "truthy"
      },
      "tags": [
        "api"
      ]
    },
    "asyncapi-info-license": {
      "description": "AsyncAPI object info `license` must be present and non-empty string.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$",
      "then": {
        "field": "info.license",
        "function": "truthy"
      },
      "tags": [
        "api"
      ]
    },
    "asyncapi-license-url": {
      "description": "License object should include `url`.",
      "recommended": false,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$",
      "then": {
        "field": "info.license.url",
        "function": "truthy"
      }
    },
    "asyncapi-tags-alphabetical": {
      "description": "AsyncAPI object should have alphabetical `tags`.",
      "recommended": false,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$",
      "then": {
        "field": "tags",
        "function": "alphabetical",
        "functionOptions": {
          "keyedBy": "name"
        }
      }
    },
    "asyncapi-operation-description": {
      "description": "Operation `description` must be present and non-empty string.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$.paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]",
      "then": {
        "field": "description",
        "function": "truthy"
      },
      "tags": [
        "operation"
      ]
    },
    "asyncapi-operation-operationId": {
      "description": "Operation should have an `operationId`.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$.paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]",
      "then": {
        "field": "operationId",
        "function": "truthy"
      },
      "tags": [
        "operation"
      ]
    },
    "asyncapi-path-declarations-must-exist": {
      "description": "Path parameter declarations cannot be empty, ex.`/companies/{}` is invalid.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$.paths",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "{}"
        }
      },
      "tags": [
        "given"
      ]
    },
    "asyncapi-path-keys-no-trailing-slash": {
      "description": "paths should not end with a slash.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$.paths",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "notMatch": ".+\\/$"
        }
      },
      "tags": [
        "given"
      ]
    },
    "asyncapi-path-not-include-query": {
      "description": "given keys should not include a query string.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$.paths",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\?"
        }
      },
      "tags": [
        "given"
      ]
    },
    "asyncapi-tag-description": {
      "description": "Tag object should have a `description`.",
      "recommended": false,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$.tags[*]",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "asyncapi-servers": {
      "description": "Define at least one server.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "given": "$",
      "then": {
        "field": "servers",
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "object",
            "minProperties": 1
          }
        }
      }
    },
    "asyncapi-parameter-description": {
      "description": "Parameter objects should have a `description`.",
      "recommended": false,
      "formats": [
        "aas2"
      ],
      "given": "$..['parameters']",
      "then": {
        "field": "description",
        "function": "truthy"
      },
      "tags": [
        "parameters"
      ]
    },
    "asyncapi-server-not-example.com": {
      "description": "Server URL should not point at example.com.",
      "recommended": false,
      "formats": [
        "aas2"
      ],
      "given": "$.servers[*].url",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "example\\.com"
        }
      }
    },
    "asyncapi-server-trailing-slash": {
      "description": "Server URL should not have a trailing slash.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "given": "$.servers[*].url",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "/$"
        }
      }
    },
    "asyncapi-valid-schema-example": {
      "description": "Examples must be valid against their defined schema.",
      "message": "{{error}}",
      "severity": 0,
      "recommended": false,
      "formats": [
        "aas2"
      ],
      "type": "validation",
      "given": "$.components.schemas..[?(@property !== 'properties' && @.example && (@.type || @.format || @.$ref))]",
      "then": {
        "function": "schemaPath",
        "functionOptions": {
          "field": "example",
          "schemaPath": "$"
        }
      }
    },
    "asyncapi-schema": {
      "description": "Validate structure of AsyncAPI v2.0.0 Specification.",
      "message": "{{error}}",
      "severity": 0,
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "validation",
      "given": "$",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "$ref": "./schemas/schema.aas2.json"
          }
        }
      }
    },
    "asyncapi-unused-components-schema": {
      "description": "Potentially unused components schema has been detected.",
      "recommended": true,
      "formats": [
        "aas2"
      ],
      "type": "style",
      "resolved": false,
      "given": "$.components.schemas",
      "then": {
        "function": "unreferencedReusableObject",
        "functionOptions": {
          "reusableObjectsLocation": "#/components/schemas"
        }
      }
    }
  }
}
